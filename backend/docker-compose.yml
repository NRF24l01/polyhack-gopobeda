networks:
  flask-net:
    driver: bridge

volumes:
  app-data:
  postgres-data:

services:
  app:
    image: "ghcr.io/nrf24l01/polyhack-gopobeda/backend-build:latest"
    build:
      context: .
      dockerfile: Dockerfile
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:8080/ping"]
      interval: 10s
      retries: 30
      timeout: 3s
      start_period: 10s
    restart: "no"
    ports:
      - "8002:8080"
    env_file:
      - .env
    environment:
      - SERVER_ADDRESS=0.0.0.0:8080
      - POSTGRES_HOST=postgres
      - POSTGRES_USERNAME=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DATABASE=postgres
      - APP_DEBUG=${APP_DEBUG}
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - app-data:/app
    networks:
      - flask-net

  postgres:
    image: postgres:13-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: postgres
      POSTGRES_HOST_AUTH_METHOD: trust
    expose:
      - "5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - flask-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      retries: 5
    command: ["postgres", "-c", "listen_addresses=*"]
  
  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    restart: unless-stopped
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_POLL_INTERVAL=300
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock